00000293  -- ADDI x5, x0, 0       ; x5 = 0
00100313  -- ADDI x6, x0, 1       ; x6 = 1
00200393  -- ADDI x7, x0, 2       ; x7 = 2
00B304B3  -- ADD  x9, x6, x11     ; x9 = x6 + x11
40B30533  -- SUB  x10, x6, x11    ; x10 = x6 - x11
00E2A633  -- SLT  x12, x5, x14    ; x12 = x5 < x14 (signed)
01D2B6B3  -- SLTU x13, x5, x29    ; x13 = x5 < x29 (unsigned)
0062C733  -- XOR  x14, x5, x6     ; x14 = x5 xor x6
00F2D7B3  -- OR   x15, x5, x15    ; x15 = x5 or x15
01F2E833  -- AND  x16, x5, x31    ; x16 = x5 and x31
00129313  -- SLLI x6, x5, 1       ; x6 = x5 << 1
0022D393  -- SRLI x7, x5, 2       ; x7 = x5 >> 2 (logical)
4032F413  -- SRAI x8, x5, 3       ; x8 = x5 >>> 3 (arithmetic)
0062A533  -- SLL  x10, x5, x6     ; x10 = x5 << x6
0072B5B3  -- SRL  x11, x5, x7     ; x11 = x5 >> x7
4082C633  -- SRA  x12, x5, x8     ; x12 = x5 >>> x8
0012A613  -- SLTI x12, x5, 1      ; x12 = x5 < 1 (signed)
FFF2B693  -- SLTIU x13, x5, -1    ; x13 = x5 < 0xFFFFFFFF (unsigned)
1232C713  -- XORI x14, x5, 0x123  ; x14 = x5 ^ 0x123
00F2D793  -- ORI  x15, x5, 15     ; x15 = x5 | 15
00F2E813  -- ANDI x16, x5, 15     ; x16 = x5 & 15
0002A023  -- SW   x0, 0(x5)       ; mem[x5 + 0] = x0
0042A223  -- SW   x4, 4(x5)       ; mem[x5 + 4] = x4
0002A303  -- LW   x6, 0(x5)       ; x6 = mem[x5 + 0]
0042A383  -- LW   x7, 4(x5)       ; x7 = mem[x5 + 4]
00528463  -- BEQ  x5, x5, +8      ; if x5 == x5, PC += 8
00629463  -- BNE  x5, x6, +8      ; if x5 != x6, PC += 8
0000006F  -- JAL  x0, +0          ; jump to self (infinite loop)
0002F067  -- JALR x0, x5, 0       ; jump to address in x5
00000297  -- AUIPC x5, 0          ; x5 = PC + 0
000002B7  -- LUI   x5, 0          ; x5 = 0x00000000
00000013  -- NOP (ADDI x0, x0, 0)
00000013  -- NOP
